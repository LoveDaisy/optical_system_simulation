function [sys, fval, sys1, fval1] = optimize_simple_system(sys, f_des, field_angle, f_number, image_curvature)
% This function optimizes the initial system, with given target focal lenght, field angle, F-number, and 
% curvature of image surface (if image_curvature = 0 then it is image plane).

d_line = util.get_fraunhofer_line('d');
F_line = util.get_fraunhofer_line('F');
C_line = util.get_fraunhofer_line('C');

% Normalize factor for all curvature variables and thickness variables.
normalize_size = [f_des, 1e-3*f_des];

%% First optimization
fminsearch_options = optimset('Display', 'iter', 'LargeScale', 'off', ...
    'TolX', 1e-5, 'MaxFunEvals', 1000, 'MaxIter', 1e5);

sys_options = sys.makeOptimOptions('VarC', 1:length(sys.surfaces), ...
    'ChromaticWavelength', [d_line, C_line, F_line], ...
    'NormalizeSize', normalize_size, ...
    'FullField', field_angle, ...
    'FNumber', f_number, ...
    'FieldSample', [0, 0.5, 0.7, 1], ...
    'ImageCurvature', 0, ...
    'ObjFocalLength', [f_des, .1], ...
    'Obj3rdAbrr', [0, 2; 0, 1; 0, 0.2; 0, 0; 0, 0; 0, 5; 0, 0.2], ...
    'ObjLSA', 10);
func = sys.getOptimObjectiveFunction(sys_options);

% Variable for optimization. The curvature variables are scaled by normalize_size(1)
x0 = cat(1, sys.surfaces.c) * normalize_size(1);

% Optimization
x1 = fminsearch(func, x0, fminsearch_options);
[~, fval1] = func(x1);

sys = sys.updateParameters(sys_options, x1);
l0 = sys.getBackWorkingLength(0, d_line);
sys.surfaces(end).t = l0;
sys1 = sys;

%% Second optimization
fminsearch_options = optimset('Display', 'iter', 'LargeScale', 'off', ...
    'TolX', 1e-5, 'MaxFunEvals', 1e5, 'MaxIter', 1e5);

sys_options = sys.makeOptimOptions('VarC', 1:length(sys.surfaces), ...
    'VarT', length(sys.surfaces), ...
    'ChromaticWavelength', [d_line, C_line, F_line], ...
    'NormalizeSize', normalize_size, ...
    'FullField', field_angle, ...
    'FNumber', f_number, ...
    'FieldSample', [0, 0.5, 0.7, 1], ...
    'ImageCurvature', image_curvature, ...
    'ObjFocalLength', [f_des, 800], ...
    'ObjLSA', 20, ...
    'ObjSphChrm', 50, ...
    'ObjOSC', 10, ...
    'ObjRms', 20);
func = sys.getOptimObjectiveFunction(sys_options);

% The thickness variables are scaled by normalize_size(2)
x1 = [cat(1, sys.surfaces.c) * normalize_size(1); sys.surfaces(end).t / normalize_size(2)];

% Optimization
x2 = fminsearch(func, x1, fminsearch_options);
[~, fval] = func(x2);
sys = sys.updateParameters(sys_options, x2);
end